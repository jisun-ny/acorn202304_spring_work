<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

   <!-- 
      JNDI 데이터 소스 객체 얻어오는 설정   
      Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
       
      <Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>          
   -->
   
  
   <beans:bean id="dataSource" 
      class="org.springframework.jndi.JndiObjectFactoryBean">
      <beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
   </beans:bean>
  
   <!-- 
      위는 아래의 코드와 같다
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
      
      즉, 스프링이 직접 얘를 new해서 setter메소드 호출해서 문자열 넣어주는 것
    -->
   
   
   <!-- 
      SqlSessionFactory 객체 
      Configuration.xml 문서가 어디에 있는지 알려야 한다. 
      value 에서 classpath: 은  src/main/resources 폴더를 가리킨다. 
      따라서  classpath:Configuration.xml 은  src/main/resources 폴더안에 존재 해야 한다. 
   -->
   <beans:bean id="sessionFactory" 
      class="org.mybatis.spring.SqlSessionFactoryBean">
      <beans:property name="dataSource" ref="dataSource"/>
      <beans:property name="configLocation" value="classpath:Configuration.xml"/>
   </beans:bean>
   <!-- 
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:Configuration.xml");
    -->
   

   <!-- 
      SqlSession 인터페이스를 구현한 
      SqlSessionTemplate(SqlSession) 객체 
      Dao 가 의존하는 객체 
   -->
   <beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      <beans:constructor-arg name="sqlSessionFactory" 
         ref="sessionFactory"/>
   </beans:bean>
   <!-- SqlSessionTemplate객체를 생성하면서 constructor-arg를 생성자로 넣어준다. -->
   <!-- SqlSessionTemplate type은 보통 SqlSession타입으로 받아서 사용 -->
   <!--  insert, update, delete 이런것들이 따로 문서로 빠진다.. -->
   
   
   <!-- 
      위의 bean 설정을 java code 로 환산 하면 아래와 같다 
      
      dataSource = new JndiObjectFactoryBean();
      dataSource.setJndiName("java:comp/env/jdbc/myoracle");
      
      sessionFactory=new SqlSessionFactoryBean();
      sessionFactory.setDataSource(dataSource);
      sessionFactory.setConfigLocation("classpath:xxx");
      
      new SqlSessionTemplate(sessionFactory);
    -->
    
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- webapp에 resources 폴더에 있는 파일들은 spring DispatcherServlet을 거치지 않고 바로바로 응답 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		[컴포넌트 스캔]
		com.gura.spring02 패키지와 하위 패키지를 모두 탐색(scan)해서 
		spring이 생성하고 관리할 객체를 찾아서 직접 생성하고 관리가 된다.
		
		bean이 된다 -> 스프링이 관리하는 객체가 된다.
		
		scan해서
		찾는 기준: @Controller, @Service, @Repository, @Component 등의 
		annotation이 붙어있는 클래스를 찾아서 bean으로 만든다. (new해서 자기가 가지고 있다가 필요로 하는 곳(개발자가 따로 표시)에다가 필요한 시점에 넣어준다.)

	 -->
	<context:component-scan base-package="com.gura.spring02" />
	<!--  모든 bean을 다 여기에 명시할 수 없으니 annotaion을 붙여놓으면 component-scan을 통해서 자동으로 bean으로 추출된다. -->
	
	
	
</beans:beans>
